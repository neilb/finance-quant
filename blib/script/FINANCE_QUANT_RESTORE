#!/usr/bin/perl 

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

=head1 NAME
  
  FINANCE_QUANT_RESTORE
  
=head1 DESCRIPTION

    Restores a recommended result session of a previous run from a saved master-run Storable

=head1 SYNOPSIS

  FINANCE_QUANT_RESTORE /tmp/Finance-Quant/master-run

=head1 SEE ALSO

  Finance::Quant  
  
  http://html5stockbotdotcom.blogspot.com/view/sidebar
  
=head1 AUTHOR

  Hagen Geissler santex@cpan.org

=head1 TODO

  part of Finance::Quant

  
=head1 COPYRIGHT AND LICENSE
  Copyright (C) 2012 by Hagen Geissler
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself, either Perl version 5.12.4 or,
  at your option, any later version of Perl 5 you may have available.
=cut


use strict;
use warnings;
use diagnostics;
use Storable;
use Data::Dumper;
use Finance::Quant;
use Test;
use Cache::Memcached;


BEGIN { plan tests => 42 }

printf("\n%s\nError no argument provided require somthing like:\n%s /tmp/Finance-Quant/master-run \n%s\n","@"x80,$0,"@"x80) and exit(0) unless($ARGV[0]);

###################

#my $self = Finance::Quant->recommended;

#print Dumper [$self->{config}];

#$self->Home();

#DONE DATA GOES TO TMP DIRECTORY


#HERE WAYS TO KEEP DATA UNDER CONTROLL AND MINIMIZE RECALCULATION


#store $self, 'master-run';
#store $self, 'master-run-BACKUP';

my $self = retrieve($ARGV[0]);

#I have 1GB ASSIGNED
my $memd = new Cache::Memcached {
'servers' => [ "127.0.0.1:11211"],
'debug' => 0,
'compress_threshold' => 10_000,
} or warn($@);


$memd->set("master-run",$self);
$memd->set("master-run-BACKUP",$self);


$memd->set("master-run-SYMBOLS",[keys %{$self->{result}}]);

my @symbols = $memd->get("master-run-SYMBOLS");


print Dumper @symbols;


1;

__DATA__
#system('for i in `ls /tmp/Finance-Quant/2012-Jan-27-Fri/ibes-strong-buy/ | replace ".jpg" ""`; do perl ~/myperl/charter.pm $i; done');
