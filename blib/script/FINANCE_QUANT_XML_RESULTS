#!/usr/bin/perl 

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell


=head1 NAME
  
  FINANCE_QUANT_XML_RESULTS
  
=head1 DESCRIPTION

    Writes the data of a calculation into a xml file

=head1 SYNOPSIS

  FINANCE_QUANT_XML_RESULTS /tmp/Finance-Quant/master-run output.xml

=head1 SEE ALSO

  Finance::Quant  
  
  http://html5stockbotdotcom.blogspot.com/view/sidebar
  
=head1 AUTHOR

  Hagen Geissler santex@cpan.org

=head1 TODO

  part of Finance::Quant

  
=head1 COPYRIGHT AND LICENSE
  Copyright (C) 2012 by Hagen Geissler
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself, either Perl version 5.12.4 or,
  at your option, any later version of Perl 5 you may have available.
=cut

use strict;
use warnings;
use diagnostics;
use Data::Dumper;
use Cache::Memcached;
use Storable;
use File::Find;
use XML::Simple;
use JSON;

printf("\n%s\nError no argument provided require somthing like:\n%s /tmp/Finance-Quant/master-run output.xml \n%s\n","@"x80,$0,"@"x80) and exit(0) unless($ARGV[1]);

our ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) = localtime( time() );
my $memd = new Cache::Memcached {
'servers' => [ "127.0.0.1:11211"],
'debug' => 0,
'compress_threshold' => 10_000,
} or warn($@);
#find("master-run");

    system("FINANCE_QUANT_RESTORE ".$ARGV[0]);

	my $hashref = $memd->get("master-run");
	my $xml = XML::Simple::XMLout( $hashref->{result} );
	my $json = encode_json( $hashref->{result} );

open (XML,sprintf(">%s",$ARGV[1]));
print XML $xml;
close (XML);
print Dumper keys %{$hashref->{result}},$xml;
print $xml;



open (XML,sprintf(">%s",$ARGV[2]));
print XML $json;
close (XML);

#print $xml;

1;
